@page "/device-features/{DeviceId}"
@using Configastic.Components.Features.Scanner.Pages.ViewModels
@using Configastic.Components.Features.Scanner.Store
@using Configastic.SharedModels.Interfaces
@using Microsoft.AspNetCore.Components
@using Fluxor.Blazor.Web.Components

@inherits FluxorComponent

@inject IState<ScanningState> ScanningState
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
    @if (_device != null)
    {
        @if (_device is IRelays relaysDevice)
        {
            <MudPaper Elevation="3" Class="pa-4 mb-4">
                <MudText Typo="Typo.h6">Relays</MudText>
                <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                    @foreach (var relay in relaysDevice.Relays)
                    {
                        <MudButton OnClick="() => ControlRelay(relay)">
                            Relay @(relay.RelayIndex)
                        </MudButton>
                    }
                </MudButtonGroup>
            </MudPaper>
        }

        @if (_device is IShleifs shleifsDevice)
        {
            <MudPaper Elevation="3" Class="pa-4">
                <MudText Typo="Typo.h6">Inputs</MudText>
                <MudGrid>
                    @foreach (var shleif in shleifsDevice.Shleifs)
                    {
                        <MudItem xs="12">
                            <MudPaper Elevation="2" Class="d-flex align-center pa-4">
                                <MudItem xs="3">
                                    <MudText>Input @(shleif.ShleifIndex)</MudText>
                                    <MudIcon Icon="@(shleif == _selectedShleif && _isAdcCollecting
                                ? Icons.Material.Filled.Circle
                                : Icons.Material.Outlined.Circle)"
                                             Color="@(shleif == _selectedShleif && _isAdcCollecting
                                ? Color.Success
                                : Color.Default)" />
                                </MudItem>
                                <MudItem xs="9">
                                    <ChartItem @ref="_tempChartRef"
                                               Shleif="shleif"
                                               CTS="_cts"
                                               OnRegister="chart => RegisterChart(shleif, chart)" />
                                </MudItem>
                                <MudButton OnClick="() => SelectShleif(shleif)">Select</MudButton>
                            </MudPaper>
                        </MudItem>
                    }

                </MudGrid>
            </MudPaper>
        }
    }
</MudContainer>

@code {
    [Parameter]
    public string DeviceId { get; set; }

    private IOrionDevice _device;
    private IShleif _selectedShleif;
    private CancellationTokenSource _cts;
    private bool _isAdcCollecting;
    private Dictionary<IShleif, ChartItem> _chartRefs = new();
    private ChartItem _tempChartRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_tempChartRef != null && _selectedShleif != null && !_chartRefs.ContainsKey(_selectedShleif))
        {
            _chartRefs[_selectedShleif] = _tempChartRef;
            _tempChartRef = null; // Reset temporary ref after use
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void RegisterChart(IShleif shleif, ChartItem chart)
    {
        if (!_chartRefs.ContainsKey(shleif))
        {
            _chartRefs[shleif] = chart;
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _device = ScanningState.Value.FoundDevices
            .FirstOrDefault(d => d.Id == int.Parse(DeviceId));

        if (_device == null)
        {
            NavigateBack();
        }

        _cts = new CancellationTokenSource();
    }

    private async Task SelectShleif(IShleif shleif)
    {
        // Stop any existing ADC collection
        StopAdcCollection();

        // Set the selected shleif
        _selectedShleif = shleif;

        // Start ADC collection for the selected shleif
        if (_chartRefs.TryGetValue(shleif, out var chartRef) && chartRef != null)
        {
            chartRef.Shleif = shleif;
            chartRef.CTS = _cts;
            _isAdcCollecting = true;
            StateHasChanged();
            await chartRef.StartAdcValueCollectionAsync();
        }
    }

    private void StopAdcCollection()
    {
        _isAdcCollecting = false;

        if (_cts != null && !_cts.IsCancellationRequested)
        {
            _cts.Cancel();
            _cts.Dispose();
            _cts = new CancellationTokenSource();
        }
    }

    private async Task ControlRelay(IRelay relay)
    {
        StopAdcCollection();
        var currentState = await relay.GetCurrentRelayState();

        if (currentState)
            await relay.TurnOffAsync();
        else
            await relay.TurnOnAsync();
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/scanner");
    }

    public void Dispose()
    {
        StopAdcCollection();
    }
}