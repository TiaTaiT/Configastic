@page "/scanner"
@using Configastic.Services.Interfaces
@using Configastic.SharedModels.Interfaces
@using Configastic.SharedModels.Models.Ports
@using Fluxor.Blazor.Web.Components
@using Configastic.Components.Features.Scanner.Store
@using Configastic.Services.Services

@inherits FluxorComponent

@inject IState<ScanningState> ScanningState
@inject Fluxor.IDispatcher Dispatcher
@inject IDeviceSearcher DeviceSearcher
@inject MudBlazor.IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-0">
    <MudPaper Elevation="3"
    Class="pa-4 mb-4"
    Style="position: sticky; top: 0; z-index: 1;">
        <MudText Typo="Typo.h5" Class="mb-4">
            @(@ScanningState.Value.ScannerMode ? "Devices Scanning" : "Addresses renumbering")
        </MudText>

        <MudProgressLinear Color="Color.Primary"
        Value="@ScanningState.Value.Progress"
        Class="my-4" />

        @if (@ScanningState.Value.ScannerMode)
        {
            <MudSlider @bind-Value="_searchRange"
            Min="1"
            Max="126"
            Step="1"
            TickMarks="true"
            ValueLabel="true"
            Class="mb-4" />
        }

        <MudGrid>
            <MudItem xs="6">
                <MudSwitch 
                    Value="@ScanningState.Value.ScannerMode"
                    ValueChanged="OnModeToggled"
                    Color="Color.Primary"
                    Label="Mode"
                    T="bool" />
            </MudItem>
            <MudItem xs="6" Class="d-flex justify-end align-center">
                <MudText Class="mr-2">
                    @(ScanningState.Value.IsScanning ? "Scanning" : "Scan")
                </MudText>
                <MudSwitch 
                    Value="@ScanningState.Value.IsScanning"
                    Color="Color.Primary"
                    T="bool"
                    ValueChanged="OnScanningToggled" />
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudPaper Class="pa-4"
              Style="height: calc(100vh - 290px); overflow-y: auto;">
        <MudList Clickable="true"
                 Dense="true"
                 T="object">
            @foreach (var device in ScanningState.Value.FoundDevices)
            {
                <DeviceListItem Device="device"
                OnScanningToggledOff="ScanningToogledOff"
                OnSetFirstFreeAddressClick="OnDeviceSetFirstFreeAddressClicked"
                OnChangeAddressClick="OpenChangeAddressDialogAsync" />
            }
        </MudList>
    </MudPaper>
</MudContainer>

@code {
    private bool _isAdvancedMode = false;
    private int _searchRange = 1;
    private CancellationTokenSource _cts = new CancellationTokenSource();

    private async Task OnModeToggled(bool value)
    {
        if(value)
        {
            Dispatcher.Dispatch(new SetSearchingModeAction());
        }
        else
        {
            Dispatcher.Dispatch(new SetRenumberingModeAction());
        }
    }

    private async Task OnScanningToggled(bool value)
    {
        if (value)
        {
            Dispatcher.Dispatch(new StartScanningAction());
            await StartScanning();
        }
        else
        {
            Dispatcher.Dispatch(new StopScanningAction());
            _cts?.Cancel();
        }
    }

    private async Task ScanningToogledOff()
    {
        await OnScanningToggled(false);
        await Task.Delay(100); // Wait for any ongoing scanning to stop
    }

    private async Task OnDeviceFeaturesClicked()
    {
        await ScanningToogledOff();
    }

    private async Task OnDeviceSetFirstFreeAddressClicked()
    {
        await ScanningToogledOff();
    }

    private async Task StartScanning()
    {
        _cts = new CancellationTokenSource();

        try
        {
            var ip = GetServerIp();
            var localUdp = GetClientUdpPort();
            var remoteUdp = GetServerUdpPort();

            if (ScanningState.Value.ScannerMode)
            {
                await DeviceSearcher.SearchDevicesAsync(
                    ip,
                    localUdp,
                    remoteUdp,
                    _searchRange,
                    device => Dispatcher.Dispatch(new AddFoundDeviceAction(device)),
                    progress => Dispatcher.Dispatch(new UpdateProgressAction(progress)),
                    _cts.Token);
                return;
            }

            await DeviceSearcher.ChangeDefaultAddressToFirstFree(
                ip,
                localUdp,
                remoteUdp,
                device => Dispatcher.Dispatch(new AddFoundDeviceAction(device)),
                () => Dispatcher.Dispatch(new ClearFoundDeviceAction()),
                _cts.Token);
        }
        catch (OperationCanceledException)
        {
            // Scanning was stopped by the user
        }
        finally
        {
            Dispatcher.Dispatch(new StopScanningAction());
        }
    }

    private async Task OpenChangeAddressDialogAsync(IOrionDevice device)
    {
        await OnScanningToggled(false);
        var parameters = new DialogParameters
        {
            { nameof(ChangeAddressDialog.DeviceName), device.Model },
            { nameof(ChangeAddressDialog.CurrentDeviceAddress), (int)device.AddressRS485 }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
        var dialog = DialogService.Show<ChangeAddressDialog>("Change Address", parameters, options);
        var result = await dialog.Result;

        if (result?.Canceled == false && result.Data != null)
        {
            var newAddress = (int)result.Data;
            await device.ChangeDeviceAddressAsync((byte)newAddress);
            Dispatcher.Dispatch(new UpdateFoundDeviceAction(device));
        }
    }

    //private static int GetClientUdpPort() => Preferences.Default.Get("C2000wifiLocalPort", 8100);
    //private static int GetServerUdpPort() => Preferences.Default.Get("C2000wifiRemotePort", 12000);
    //private static string GetServerIp() => Preferences.Default.Get("C2000wifiIpAddress", "10.10.10.1");
    private static string GetServerIp() => Preferences.Default.Get("C2000ethernetIpAddress", "192.168.127.254");

    private static int GetClientUdpPort() => Preferences.Default.Get("C2000ethernetLocalPort", 40001);
    private static int GetServerUdpPort() => Preferences.Default.Get("C2000ethernetLocalPort", 40001);
}