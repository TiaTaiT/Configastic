@page "/google-projects"
@using Configastic.Components.Features.GoogleProjects.Store
@using Configastic.Services.Interfaces
@using Configastic.SharedModels.Models.Utils
@using Fluxor
@inject IState<ProjectHeaderState> ProjectHeaderState
@inject Fluxor.IDispatcher Dispatcher
@inject IGoogleDriveSheetsLister googleDriveSheetsLister

<MudContainer >
    <MudPaper Elevation="3" Class="pa-4 mb-4" Style="position: sticky; top: 0; left: 0; right: 0; z-index: 1;">
        <MudGrid Class="pa-4">
            <MudItem xs="10">
                <MudTextField @bind-Value="_searchTerm"
                Placeholder="Search Projects"
                Adornment="Adornment.Start"
                AdornmentIcon="@Icons.Material.Filled.Search"
                OnAdornmentClick="FilterProjects"
                Immediate="true"
                Class="mt-0" />
            </MudItem>
            <MudItem xs="2">
                <MudToggleIconButton Toggled="_showCheckedInOnly"
                ToggledChanged="ToggleCheckedInFilter"
                Icon="@Icons.Material.Filled.FilterList"
                ToggledIcon="@Icons.Material.Filled.FilterListOff"
                Color="@(_showCheckedInOnly ? Color.Primary : Color.Default)"
                Class="mt-1" />
            </MudItem>
        </MudGrid>
    </MudPaper>
    <MudStack>
        @foreach (var project in FilteredProjects)
        {
            <ProjectHeaderItem ProjectHeader="@project" />
        }
    </MudStack>
</MudContainer>

@code {
    private string _searchTerm = string.Empty;
    private bool _showCheckedInOnly;

    private IEnumerable<ProjectHeader> FilteredProjects =>
        ProjectHeaderState.Value.Projects
            .Where(p =>
                // Filter by search term (if applicable)
                (string.IsNullOrEmpty(_searchTerm) ||
                 p.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                 p.ProjectNumber.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)) &&
                // Filter by checked-in status
                (!_showCheckedInOnly ||
                 ProjectHeaderState.Value.CurrentCheckedInProject?.ProjectNumber == p.ProjectNumber)
            );

    private void FilterProjects()
    {
        StateHasChanged();
    }

    private void ToggleCheckedInFilter(bool toggled)
    {
        _showCheckedInOnly = toggled;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var projectList = await googleDriveSheetsLister.ListAllSpreadsheetsAsync();

        foreach(var project in projectList)
        {
            Dispatcher.Dispatch(new AddProjectAction(project));
        }
    }
}